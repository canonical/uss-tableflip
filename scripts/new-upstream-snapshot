#!/bin/sh

ORIG_TIP=""
TEMP_D=""
VERBOSITY=0
CR='
'
error() { echo "$@" 1>&2; }
debug() {
    local level=${1}; shift;
    [ "${level}" -gt "${VERBOSITY}" ] && return
    error "${@}"
}
fail() {
    [ $# -eq 0 ] || error "$@";
    if [ -n "$ORIG_TIP" ]; then
        error "reset to previous tip with: git reset --hard $ORIG_TIP"
    fi
    exit 1;
}

Usage() {
cat <<EOF
${0##*/} [commitish]

update current branch with commitish.
commitish defaults to 'main'

options:
   -h|--help                      show this message.
      --skip-branch-name-check    do not require this branch start with ubuntu/
      --update-patches-only       stop after dropping cherry-picks and
                                  refreshing patches in debian/patches/
      --skip-release              Sync upstream commits, but avoid SRU_BUG
                                  checks as this release will not be published
      --sru-bug                   the bug number to add to the debian/changelog
      --no-bugs                   do not put bug refs (LP: #XXX) in changelog.
      --first-sru                 provide this flag when this is the first SRU
                                  to a series. It will determine the right
                                  version suffix, prompt for SRU bug.
      --first-devel-upload        provide this flag when this is the first
                                  upload to a devel series. It will determine
                                  the right version suffix, prompt for SRU bug.
   -v|--verbose                   increase verbosity.
EOF
}

env_quilt() {
    local diffargs="-p ab --no-timestamps --no-index"
    QUILT_PATCHES="debian/patches" \
        QUILT_DIFF_OPTS="-p" \
        QUILT_PATCH_OPTS="--reject-format=unified" \
        QUILT_DIFF_ARGS="$diffargs --color=auto" \
        QUILT_REFRESH_ARGS="$diffargs" \
        LANG=C "$@"
}

run_quilt() {
    env_quilt quilt --quiltrc - "$@"
}

cleanup() {
    [ ! -d "${TEMP_D}" ] || rm -Rf "${TEMP_D}"
}


refresh_shell() {
    cat 1>&2 <<EOF
Dropping you into a shell. Either do
   a.) hand-apply fix ('quilt push -f' and 'quilt refresh'
   b.) remove the patch from debian/patches if no longer needed.

When finished, 'exit 0'.
To abort, exit 1.
EOF
    env_quilt env debian_chroot="refresh-fix" "${SHELL:-/bin/bash}"
}

merge_shell() {
    cat 1>&2 <<EOF
Dropping you into a shell.
'git status' can help you.  Once you have resolved the differences
then run: 'git commit'.

After git commit, type 'exit 0'
To abort, 'exit 1'
EOF
    debian_chroot="merge-fix" "${SHELL:-/bin/bash}"
}

find_existing_remote() {
    local remotes="" cand=""
    remotes=$(git remote) || {
        error "failed running 'git remote'"
        return 1
    }
    for cand in "$@"; do
        echo "$remotes" | grep -q "^$cand$" && echo "$cand" && return
    done
    return 1
}

is_merge_commit() {
    local commitish="$1" out="" num="" numlines=""
    out=$(git show --no-patch "--format=%P" "$commitish") ||
        { error "failed git show --format=%P $commitish"; return 2; }
    numlines=$(echo "$out" | wc -l)
    [ "$numlines" -eq 1 ] || {
        error "output of git show --format=%P had multiple lines [$numlines]."
        return 2
    }
    num=$(echo "$out" | wc -w)
    [ $num -eq 0 ] && { error "$commitish had zero parents"; return 1; }
    [ $num -gt 1 ]
}

main() {
    local short_opts="hv"
    local long_opts="help,update-patches-only,no-bugs,first-devel-upload,first-sru,skip-branch-name-check,skip-release,sru-bug:,verbose"
    local getopt_out=""
    getopt_out=$(getopt --name "${0##*/}" \
        --options "${short_opts}" --long "${long_opts}" -- "$@") &&
        eval set -- "${getopt_out}" ||
        { Usage; return; }
    local skip_branch_name_check="${SKIP_BRANCH_NAME_CHECK:-0}"
    local update_patches_only=false first_devel_upload=false first_sru=false bug_refs_in_clog=true skip_release=false sru_bug_fillstr="SRU_BUG_NUMBER_HERE"

    orig_hash=$(git describe --abbrev=8)
    local cur="" next=""
    while [ $# -ne 0 ]; do
        cur="$1"; next="$2";
        case "$cur" in
            -h|--help) Usage ; exit 0;;
               --skip-branch-name-check) skip_branch_name_check=1;;
               --skip-release) skip_release=true;;
               --update-patches-only) update_patches_only=true;;
               --sru-bug) sru_bug_fillstr=$next; shift;;
               --no-bugs) bug_refs_in_clog=false;;
               --first-devel-upload) bug_refs_in_clog=true; first_devel_upload=true;;
               --first-sru) bug_refs_in_clog=false; first_sru=true;;
            -v|--verbose) VERBOSITY=$((VERBOSITY+1));;
            --) shift; break;;
        esac
        shift;
    done


    [ $# -eq 0 -o $# -eq 1 ] || {
        Usage "Got $# arguments. expected 0 or 1.";
        return;
    }

    if [ -z "$DEBFULLNAME" ] || [ -z "$DEBEMAIL" ]; then
        error "Must set DEBFULLNAME and DEBEMAIL per"
        error "  https://www.debian.org/doc/manuals/maint-guide/first.en.html"
        fail
    fi

    local cur_branch="" prev_pkg_ver pkg_name dist prev_dist t=""
    local prev_pkg_hash="" new_pkg_debian="" new_upstream_ver="" new_pkg_ver=""
    local ver_suff="" upstream_hash=""
    local from_ref="$1"

    if [ -z "$from_ref" ]; then
        remote=$(find_existing_remote upstream origin) || {
            error "Failed to find remote named 'upstream' or 'origin'."
            error "To avoid this, provide commitish."
            return 1
        }
        debug 0 "updating remote $remote for default commitish $remote/main."
        git fetch "$remote" ||
            { error "failed 'git fetch $remote'"; return 1; }
        from_ref="${remote}/main"
    fi

    cur_branch=$(git rev-parse --abbrev-ref HEAD) ||
        fail "failed to get current branch"

    ORIG_TIP=$(git rev-parse HEAD) ||
        fail "failed to get current tip"

    if [ "${skip_branch_name_check}" = "0" ]; then
        case "$cur_branch" in
            ubuntu/*) :;;
            *)
                error "On branch '$cur_branch', expect to be on ubuntu/*"
                error "Skip check with --skip-branch-name-check or"
                error "  SKIP_BRANCH_NAME_CHECK=1"
                fail;;
        esac
    fi

    TEMP_D=$(mktemp -d "${TMPDIR:-/tmp}/${0##*/}.XXXXXX") ||
        fail "failed to make tempdir"
    trap cleanup EXIT

    prev_pkg_ver=$(dpkg-parsechangelog --show-field Version) ||
        fail "failed reading package version"
    pkg_name=$(dpkg-parsechangelog --show-field Source) ||
        fail "failed to read Source from changelog"
    dist=$(dpkg-parsechangelog --show-field Distribution)


    command -v distro-info >/dev/null 2>&1 || fail "Install distro-info deb"
    devel_ver=$(distro-info --devel -r | awk '{printf $1}')
    if [ "$first_sru" = "true" ]; then
        # get ~20.10.1 for latest --stable release
        ver_suff=$(distro-info --stable -r | awk '{printf "~%s.1", $1}')
    elif [ "$first_devel_upload" = "true" ]; then
        # get ~22.04.1 for latest --devel release
        ver_suff="~${devel_ver}.1"
    else
        # if present, pull the '~16.04.x' off of the previous entry.
        ver_suff=$(echo "$prev_pkg_ver" |
            sed 's,.*~\([0-9.]*\)[.][0-9]$,~\1.1,')
        [ "${ver_suff}" = "${prev_pkg_ver}" ] && ver_suff=""
    fi
    is_devel=$(test "${ver_suff#*$devel_ver}" != "${ver_suff}" && echo "true" || echo "false")

    local sru_bug_string=""
    if [ "${is_devel}" = "false" ] && [ "${first_devel_upload}" = "false" ]; then
        sru_bug_string="(LP: #$sru_bug_fillstr)"
        bug_refs_in_clog=false
    fi

    new_pkg_debian="0ubuntu1"
    new_upstream_ver=$(git describe --abbrev=8 "${from_ref}")
    upstream_hash=$(git rev-parse --short=8 "${from_ref}")
    new_pkg_ver="${new_upstream_ver}-${new_pkg_debian}${ver_suff}"

    case "$new_upstream_ver" in
        *-[0-9]*-g[a-f0-9]*) new_msg="New upstream snapshot.";;
        [0-9][0-9].[0-9]|[0-9][0-9].[0-9].[0-9])
            new_msg="New upstream release.";;
        [0-9].[0-9]|[0-9].[0-9][0-9])
            new_msg="New upstream release.";;
        *) fail "unrecognized upstream version '$new_upstream_ver'";;
    esac

    local prev_upstream_ver=${prev_pkg_ver%-*}
    if [ "${prev_upstream_ver}" = "${new_upstream_ver}" ]; then
        echo "nothing to commit.  '$from_ref' is at ${new_upstream_ver}."
        exit 0
    fi

    local prev_released_pkg_ver="" unreleased_changes="" prev_dist=""
    if [ "$dist" = "UNRELEASED" ]; then
        prev_released_pkg_ver=$(
            dpkg-parsechangelog --offset 1 --count=1 --show-field Version)
        unreleased_changes=$(
            dpkg-parsechangelog --count=1 --show-field Changes | tail -n +4)
        if [ "${first_devel_upload}" = "true" ]; then
            prev_dist=$(distro-info --devel)
        else
            prev_dist=$(
                dpkg-parsechangelog --offset 1 --count=1 --show-field Distribution)
        fi
    else
        prev_released_pkg_ver="${prev_pkg_ver}"
        prev_dist="$dist"
    fi

    debug 1 "prev_released_pkg_ver=$prev_released_pkg_ver"
    debug 1 "unreleased=${unreleased_changes}"

    local dpseries="debian/patches/series" drops=""
    local msg="" extra="" bname=""
    if [ -e "$dpseries" ]; then
        drops=""
        while read bname extra; do
            case "$bname" in
                fix-cpick-* | cpick-*)
                    commit=${bname#fix-cpick-}
                    commit=${commit#cpick-}
                    commit=${commit%%-*}
                    echo "bname=$bname commit=${commit}" 1>&2
                    if git merge-base --is-ancestor "$commit" "$from_ref"; then
                        drops="${drops} debian/patches/$bname"
                    fi
                    ;;
                *) echo "$bname${extra:+ ${extra}}";;
            esac
        done < $dpseries > "${TEMP_D}/series"
        drops=${drops# }

        if [ -n "$drops" ]; then
            cp "${TEMP_D}/series" "$dpseries" ||
                fail "failed copying to $dpseries"
            if [ ! -s $dpseries ]; then
                git rm --force "$dpseries" ||
                    fail "failed removing empty $dpseries: git rm $dpseries"
            fi
            msg="drop cherry picks included in ${from_ref}"
            msg="${msg} commit ${upstream_hash}"
            msg="$msg${CR}${CR}drop the following cherry picks:"
            for file in $drops; do
                git rm "$file" || fail "failed to git rm $file"
                msg="${msg}$CR  ${file##*/}"
            done
            git commit -m "$msg" "$dpseries" "$drops"

            msg="drop the following cherry-picks now included:"
            for file in $drops; do
                msg="${msg}$CR+${file##*/}"
            done
            python3 "$(dirname "$0")"/add_changelog.py "${msg}" "${orig_hash}" "${bug_refs_in_clog}" ||
                fail "failed adding changelog entry cherry-pick drops."
            git commit -m "update changelog." debian/changelog ||
                fail "failed to commit changelog changes for drops."
        fi
    fi

    local pre_merge="" ret=""
    pre_merge="$(git rev-parse HEAD)"
    debug 1 "After patches dropped, at $pre_merge"

    out=$(git merge "${from_ref}" \
        -m "merge from $from_ref at $new_upstream_ver" 2>&1)
    ret=$?
    if [ $ret -ne 0 ]; then
        if [ ! -t 0 ]; then
            fail "failed[$ret] git merge ${from_ref}: $out"
        fi
        error "git merge (${from_ref}) failed: $out"
        merge_shell
        ret=$?
        [ $ret -eq 0 ] || fail "merge shell exited $ret"
        if ! is_merge_commit HEAD; then
            fail "HEAD does not seem to be merge commit."
        fi
    fi

    local refreshed="" out="" npatch=""
    rm -Rf .pc
    refreshed=""
    if [ -f "$dpseries" ]; then
        # refresh any patches.
        while :; do
            npatch=$(run_quilt next 2>&1)
            ret=$?
            [ $ret -eq 2 ] && break
            [ $ret -ne 0 ] && fail "quilt next returned $ret: $npatch"
            if out=$(run_quilt push 2>&1); then
                debug 1 "$npatch applied cleanly."
                out=$(run_quilt refresh -p ab) ||
                    fail "patch $npatch failed refresh: $out"
            elif [ ! -t 0 ]; then
                fail "patch $npatch does not apply: $out"
            else
                error "Applying $npatch failed: $out"
                refresh_shell
                ret=$?
                [ $ret -eq 0 ] || fail "refresh shell $npatch exited $ret"
                out=$(run_quilt refresh -p ab) ||
                    fail "patch $npatch failed refresh: $out"
            fi
        done
        refreshed=$(git diff --name-only debian/patches/)
        quilt pop -a || fail "failed quilt pop -a"
        rm -Rf .pc
        if [ -n "$refreshed" ]; then
            msg=$(
                echo "refresh patches against ${from_ref} commit" \
                    "$upstream_hash"
                echo
                echo "refresh patches against ${from_ref} commit" \
                     "${upstream_hash}:"
                for i in ${refreshed}; do echo "+$i"; done)
            # Having quotes around $refreshed can cause failures.
            # Please don't add them back unless you've tested on a branch with
            # refreshed patches
            git commit -m "$msg" $refreshed ||
                fail "failed to commit refreshed patches: $refreshed"
            msg=$(
                echo "refresh patches:"
                for i in ${refreshed}; do echo "+$i"; done)
            python3 "$(dirname "$0")"/add_changelog.py "${msg}" "${orig_hash}" "${bug_refs_in_clog}" ||
                fail "failed adding changelog entry for refresh"
            git commit -m "update changelog." debian/changelog ||
                fail "failed to commit changelog changes."
        fi
    fi

    if [ "$update_patches_only" = "true" ]; then
        if [ -z "$drops" ] && [ -z "$refreshed" ]; then
            error "No patches updated. Nothing to commit. restoring to $ORIG_TIP"
            git reset --hard "$ORIG_TIP" ||
                fail "failed to reset back to start commit $ORIG_TIP"
            return 0
        fi

        # We merged above and then refreshed patches as a way to get
        # code we needed to refresh against.  Now we revert back to
        # pre merge and cherry-pick the refresh changes.
        local update_hash="" refresh_hash=""
        refresh_hash=$(git rev-parse HEAD^)
        update_hash=$(git rev-parse HEAD)
        git reset --hard "$pre_merge" ||
            fail "failed to reset back to before-merge commit $pre_merge"
        git cherry-pick "$refresh_hash" ||
            fail "failed to cherry-pick $refresh_hash on $pre_merge"
        git cherry-pick "$update_hash" ||
            fail "failed to cherry-pick update commit $update_hash."
        debug 1 "Exiting after updated patches."
        return 0
    fi

    header="$new_msg${sru_bug_string:+ ${sru_bug_string}}"
    python3 "$(dirname "$0")"/add_changelog.py "${header}" "${new_pkg_ver}" "${bug_refs_in_clog}" || fail

    dch -e || fail "dch -e exited $?"

    if [ "${skip_release}" = "false" ]; then
        if grep -q "SRU_BUG_NUMBER_HERE" debian/changelog; then
            echo "You did not fill in an SRU bug string.  Add one now."
            read -r answer
            dch -e
            grep -q "$sru_bug_fillstr" debian/changelog &&
                fail "You didn't fix it (debian/changelog has $sru_bug_string)"
        fi
    fi

    git diff

    echo -n "Commit this change? (Y/n): "
    read -r answer || fail "failed to read answer"
    case "$answer" in
        n|[Nn][oO]) fail;;
    esac

    msg="update changelog (${new_msg%.} $new_upstream_ver)."
        git commit -m "$msg" debian/changelog ||
        fail "failed to commit '$msg'"

    local tag=""
    tag=$(echo "ubuntu/$new_pkg_ver" | tr '~' '_')
    release_suffix=""
    if [ "${is_devel}" = "true" ] &&
        [ "${NUS_PROPOSED_IN_CHANGELOG:-0}" != "0" ]; then
        # we do not add '-proposed' to the changelog file as
        # doing so means that an upload of that to a PPA will be rejected.
        # with a message like: Uploads aren't permitted to pocket: proposed
        release_suffix="-proposed"
    else
        prev_dist=${prev_dist%-proposed}
    fi
    echo wrote new-upstream-changes.txt for "${pkg_name}" version "${new_pkg_ver}".
    if [ "${skip_release}" = "true" ]; then
        cat <<EOF
        push your branch for review:
git commit -m "update changelog (${new_msg%.} $new_upstream_ver)." debian/changelog
git push <remote> HEAD
EOF
    else
        cat <<EOF
release with:
sed -i -e "1s/UNRELEASED/${prev_dist}${release_suffix}/" debian/changelog
git commit -m "releasing $pkg_name version $new_pkg_ver" debian/changelog
git tag $tag
# optionally push your tag: git push <remote> $tag
EOF
    fi

    return 0
}


main "$@"

# vi: ts=4 expandtab
